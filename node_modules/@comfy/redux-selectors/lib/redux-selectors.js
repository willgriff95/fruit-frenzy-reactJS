'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var redux = require('redux');

var MAX_KEYS = 512;

var trimCache = function trimCache(map) {
  var keys = map.keys();
  while (map.size > MAX_KEYS) {
    map.delete(keys.next().value);
  }
};

var memoizeString = function memoizeString(func) {
  var map = new Map();
  return function (string) {
    if (map.has(string)) {
      return map.get(string);
    } else {
      var result = func(string);
      map.set(string, result);
      if (map.size > MAX_KEYS) {
        trimCache(map);
      }
      return result;
    }
  };
};

// Borrowed from Lodash
// https://github.com/lodash/lodash/blob/4.17.4/lodash.js
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

var reEscapeChar = /\\(\\)?/g;
var reLeadingDot = /^\./;
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

var stringToPath = memoizeString(function (string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});

var baseGet = function baseGet(obj, path) {
  var paths = Array.isArray(path) ? path : stringToPath(path);
  var val = obj;
  var index = 0;
  while (index < paths.length) {
    if (val == null) {
      return;
    }
    val = val[paths[index]];
    index += 1;
  }
  return val;
};

var get = function get(obj, path, defaultValue) {
  var result = obj == null ? undefined : baseGet(obj, path);
  return result === undefined ? defaultValue : result;
};

var KEY_MARKER = '@@comfy/redux-selectors/createKeyMap/KEY_MARKER';
var UNDEFINED_STATE = '@@comfy/redux-selectors/createKeyMap/UNDEFINED_STATE';

var createKeyMap = function createKeyMap() {
  var keyCache = new WeakMap();
  var keyMarker = { KEY_MARKER: KEY_MARKER };
  var undefinedState = { UNDEFINED_STATE: UNDEFINED_STATE };

  return function (args) {
    var lastIndex = args.length - 1;
    if (args.length === 0) {
      return undefinedState;
    }
    if (lastIndex === 0) {
      return args[0];
    }
    return args.reduce(function (map, arg, i) {
      if (!map.has(arg)) {
        var nestedMap = new WeakMap();
        map.set(arg, nestedMap);
      }
      if (i === lastIndex) {
        var _nestedMap = map.get(arg);
        if (!_nestedMap.has(keyMarker)) {
          _nestedMap.set(keyMarker, new WeakSet(args));
        }
        return _nestedMap.get(keyMarker);
      }
      return map.get(arg);
    }, keyCache);
  };
};

var memoizeSelector = function memoizeSelector(selector) {
  var cache = new WeakMap();
  var getKey = createKeyMap();

  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var key = getKey(args);
    if (!cache.has(key)) {
      var value = selector.apply(null, args);
      cache.set(key, value);
      return value;
    }
    return cache.get(key);
  };
};

var mapSelectorsToArgs = function mapSelectorsToArgs(selectors) {
  return function (args) {
    return selectors.map(function (selector) {
      return selector.apply(null, args);
    });
  };
};

var createStateSelector = function createStateSelector(selector) {
  if (typeof selector === 'string' || Array.isArray(selector)) {
    return function (state) {
      return get(state, selector);
    };
  }
  return selector;
};

var createPropsSelector = function createPropsSelector(selector) {
  var propSelector = createStateSelector(selector);
  return function (_, props) {
    return propSelector(props);
  };
};

var createDependentSelector = function createDependentSelector(selectors) {
  selectors = selectors.map(createStateSelector);
  var resultsFunc = selectors[selectors.length - 1];
  selectors = selectors.slice(0, -1);
  var mapArgs = mapSelectorsToArgs(selectors);
  return memoizeSelector(function () {
    for (var _len = arguments.length, selectorArgs = Array(_len), _key = 0; _key < _len; _key++) {
      selectorArgs[_key] = arguments[_key];
    }

    var values = mapArgs(selectorArgs);
    return resultsFunc.apply(null, values);
  });
};

var createSelector = function createSelector() {
  for (var _len2 = arguments.length, selectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    selectors[_key2] = arguments[_key2];
  }

  if (selectors.length > 1) {
    return createDependentSelector(selectors);
  }
  return createStateSelector(selectors[0]);
};

var createOptionsMap = function createOptionsMap() {
  var wrapperMap = new Map();
  return function (options) {
    var key = JSON.stringify(options);
    var wrapper = void 0;
    if (!wrapperMap.has(key)) {
      wrapper = {};
      wrapperMap.set(key, {});
      if (wrapperMap.size > MAX_KEYS) {
        trimCache(wrapperMap);
      }
    }
    wrapper = wrapperMap.get(key);
    wrapper.options = options;
    return wrapper;
  };
};

var defaultArgsFilter = function defaultArgsFilter(args) {
  return args;
};
var filterState = function filterState(_ref) {
  var state = _ref[0];
  return [state];
};

var withOptions = function withOptions(creator) {
  var argsFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultArgsFilter;

  var wrap = createOptionsMap();
  var selector = memoizeSelector(function (_ref2) {
    for (var _len = arguments.length, selectorArgs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      selectorArgs[_key - 1] = arguments[_key];
    }

    var options = _ref2.options;
    return creator.apply(undefined, options).apply(undefined, selectorArgs);
  });
  return function () {
    for (var _len2 = arguments.length, options = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      options[_key2] = arguments[_key2];
    }

    return function () {
      for (var _len3 = arguments.length, selectorArgs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        selectorArgs[_key3] = arguments[_key3];
      }

      return selector.apply(undefined, [wrap(options)].concat(argsFilter(selectorArgs)));
    };
  };
};

var mapSelectorsToProps = function mapSelectorsToProps(selectors) {
  return function (props) {
    return selectors.map(function (selector, i) {
      var arg = props[i] !== undefined ? props[i] : props[0];
      return selector !== undefined ? selector(arg) : undefined;
    });
  };
};

var withProps = function withProps(selectorCreator) {
  for (var _len = arguments.length, propSelectors = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    propSelectors[_key - 1] = arguments[_key];
  }

  var creator = withOptions(selectorCreator, filterState);
  var hasPropSelectors = propSelectors.length > 0;
  var applyProps = void 0;
  if (hasPropSelectors) {
    var selectors = propSelectors.map(createStateSelector);
    applyProps = mapSelectorsToProps(selectors);
  }
  return function () {
    for (var _len2 = arguments.length, selectorArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      selectorArgs[_key2] = arguments[_key2];
    }

    var props = selectorArgs.slice(1);

    var creatorArgs = props;
    if (hasPropSelectors) {
      creatorArgs = applyProps(props);
    }
    var selector = creator.apply(null, creatorArgs);
    return selector.apply(null, selectorArgs);
  };
};

var withState = function withState(selector) {
  return function (state) {
    return selector(state);
  };
};

var combineSelectors = function combineSelectors(selectorMap) {
  var keys = Object.keys(selectorMap);
  var selectors = Object.values(selectorMap).map(createStateSelector);
  return memoizeSelector(function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return keys.reduce(function (map, key, i) {
      map[key] = selectors[i].apply(null, args);
      return map;
    }, {});
  });
};

var composeSelectors = function composeSelectors() {
  for (var _len = arguments.length, selectors = Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  var mappedSelectors = selectors.map(function (selector) {
    return createStateSelector(selector);
  }).reverse();
  return redux.compose.apply(null, mappedSelectors);
};

exports.createSelector = createSelector;
exports.createStateSelector = createStateSelector;
exports.createPropsSelector = createPropsSelector;
exports.get = get;
exports.withOptions = withOptions;
exports.withProps = withProps;
exports.withState = withState;
exports.combineSelectors = combineSelectors;
exports.composeSelectors = composeSelectors;
exports.memoizeSelector = memoizeSelector;
exports.filterState = filterState;
